const N = 2 //Cantidad de sillas.
range S = 1..2 //Rango para la cantidad de sillas.
range C = 1..3 //Cantidad total de clientes.

SILLA = SILLA[0],
SILLA[i:0..1] = ( silladisp[i]->SILLA[i]
				| when (i==0) sentarse->SILLA[1]
				| when (i==1) desocupar ->SILLA[0]). //Las acciones de SILLA se llaman cl.i.silla.j.acción.

PELUQUERO = PELUQUERO[0], //Las acciones de PELUQUERO se llaman cl.i.{figaro,mateo}.acción.
PELUQUERO[i:0..1] = ( when (i==0) dormir -> PELUQUERO[0]
					| when (i==0) despertar -> PELUQUERO[1]
					| control[i]->PELUQUERO[i]
					| when (i==1) seduerme->PELUQUERO[0]) \{dormir}. //El cliente manda al peluquero a dormir cuando terminó de cortarle el pelo.

CLIENTE = (control[i:0..1] -> if (i==0) then CORTE else SILLADISP),
CORTE = (despertar -> cortar -> seduerme -> CLIENTE),
SILLADISP = (silladisp[i:0..1] -> if (i==0) then SENTARSE else CLIENTE),
SENTARSE = (sentarse-> control[i:0..1] -> if (i==0) then CORTEBIS else ESPERAR),
ESPERAR = (control[i:0..1] -> if (i==0) then CORTEBIS else ESPERAR),
CORTEBIS = (desocupar -> despertar -> cortar-> seduerme -> CLIENTE) //Si el cliente estuvo sentado, debe desocupar la silla.
/{forall[i:0..1]{forall[j:S]{silla[j].silladisp[i]/silladisp[i]}},
  forall[j:S] {silla[j].sentarse/sentarse},
  forall[j:S] {silla[j].desocupar/desocupar},
  {figaro, mateo}.seduerme/seduerme,
  {figaro, mateo}.despertar/despertar,
  forall[i:0..1]{{figaro, mateo}.control[i]/control[i]}}. //De este modo las acciones de CLIENTE que se comparten con SILLA se llamarán cl.i.silla.j.acción.


||PELUQUERIA = (cl[C] :: {figaro,mateo} : PELUQUERO || cl[C] : CLIENTE || cl[C] :: silla[S] : SILLA).

/* cl.i.silla.j.{silladisp.k, sentarse, desocupar} en SILLA.
 * cl.i.figaro.despertar en PELUQUERO.
 * cl.i.figaro.despertar en CLIENTE.
 */
